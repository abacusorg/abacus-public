pipeline {
    agent {
        dockerfile {
            filename 'ci/Dockerfile'
            args '--gpus 1 --shm-size=4g'
            label 'docker && v100 && jenkins'
            // additionalBuildArgs '--cache-to=type=local,dest=/home/jenkins/abacus-cache --cache-from=type=local,src=/home/jenkins/abacus-cache --build-arg SPACK_INSTALL_PROCESSES=1 --build-arg SPACK_INSTALL_JOBS=16'
            additionalBuildArgs '--build-arg SPACK_INSTALL_PROCESSES=1 --build-arg SPACK_INSTALL_JOBS=$PARALLEL'
        }
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds(abortPrevious: true)
    }
    environment {
        HOME = "$WORKSPACE"
        // N.B. 4 threads is set via cgroup,
        // so processes have to be informed about this limitation manually
        OMP_NUM_THREADS = "${env.PARALLEL}"
        
        ABACUS = "$WORKSPACE"
        ABACUS_TMP = "/dev/shm/"
        ABACUS_PERSIST = "/dev/shm"
        ABACUS_SSD = "/dev/shm"
    }
    stages {
        stage('Build') {
            steps {
                sh '''
                    . /opt/spack-environment/activate.sh
                    export PYTHONPATH=$ABACUS:$PYTHONPATH

                    cd $ABACUS/external/zeldovich-PLT
                    meson setup build
                    meson compile -v -C build -j $PARALLEL

                    cd $ABACUS
                    ./configure
                    make ABACUS_CPPFLAGS=-Werror

                    cd Production/site_files
                    ln -s jenkins.def site.def
                '''
            }
        }
        stage('Test') {
            steps {
                sh '''
                    . /opt/spack-environment/activate.sh
                    export PYTHONPATH=$ABACUS:$PYTHONPATH

                    cd $ABACUS/Tests/Ewald
                    ./run_ewald.py --no-plot

                    cd $ABACUS/Tests/CheckForces
                    ./check_forces.py 64 17 --no-plot

                    cd $ABACUS/Tests/Spiral
                    ./SpiralTest.py --no-plot
                '''
            }
        }
    }
}
