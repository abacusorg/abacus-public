pipeline {
    agent {
        dockerfile {
            filename 'ci/Dockerfile'
            args '--gpus 1'
            label 'docker && v100'
        }
    }
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    environment {
        HOME = "$WORKSPACE"
        // N.B. 4 threads is set via cgroup, so processes have to be informed about this manually
        OMP_NUM_THREADS = "4"
        // Technically this path doesn't exist yet, but it will be created by the venv step
        PATH = "${WORKSPACE}/venv/bin:${env.PATH}"
        
        ABACUS = "$WORKSPACE"
        ABACUS_TMP = "/dev/shm/"
        ABACUS_PERSIST = "/dev/shm"
        ABACUS_SSD = "/dev/shm"
        
        // meson probably just needs the pkg-config path
        LD_LIBRARY_PATH = "${WORKSPACE}/external/oneTBB/install/lib64:${WORKSPACE}/external/gperftools/install/lib64:${env.LD_LIBRARY_PATH}"
        LIBRARY_PATH = "${WORKSPACE}/external/oneTBB/install/lib64:${WORKSPACE}/external/gperftools/install/lib64:${env.LIBRARY_PATH}"
        CPATH = "${WORKSPACE}/external/oneTBB/install/include:$ABACUS/external/gperftools/install/include:${env.CPATH}"
        TBBROOT="${WORKSPACE}/external/oneTBB"
        PKG_CONFIG_PATH = "${WORKSPACE}/external/oneTBB/install/lib64/pkgconfig:${env.PKG_CONFIG_PATH}"
    }
    stages {
        stage('Install Python dependencies') {
            steps {
                sh 'python3 -m venv venv'
                sh 'which pip'
                sh 'pip install -U pip'
                sh 'pip install -vUr requirements.txt'
            }
        }
        stage('Build zeldovich') {
            steps {
                dir('external/zeldovich') {
                    sh 'mkdir build'
                    sh 'meson setup build'
                    sh 'meson compile -C build -j 4'
                }
            }
        }
        stage('Build oneTBB') {
            steps {
                dir('external/oneTBB') {
                    sh 'cmake -B build -G Ninja --install-prefix=install -DTBB_TEST=OFF'
                    sh 'cmake --build build'
                    sh 'cmake --install build'
                }
            }
        }
        stage('Build tcmalloc') {
            steps {
                dir('external/gperftools') {
                    sh 'cmake -B build -G Ninja --install-prefix=install -Dgperftools_build_minimal=TRUE -Dgperftools_tcmalloc_pagesize=256'
                    sh 'cmake --build build'
                    sh 'cmake --install build'
                }
            }
        }
        stage('Build') {
            steps {
                sh 'which python'
                sh './configure'
                sh 'make'
            }
        }
        stage('Link site file') {
            steps {
                dir('Production/site_files'){
                    sh 'ln -s jenkins.def site.def'
                }
            }
        }
        stage('Test') {
            steps {
                dir('Tests/Ewald') {
                    sh './run_ewald.py'
                }
            }
        }
    }
}
