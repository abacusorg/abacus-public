#!/usr/bin/env python
'''
A Python wrapper to run Rockstar on Abacus outputs.

Usage:

$ ./rockstar.py --help

'''

import argparse
import datetime
import subprocess32
from glob import glob
import os
import contextlib
import shutil
import pdb
import numpy as np
from Abacus.Tools import chdir
import tarfile
from Abacus.InputFile import InputFile

from Abacus.Analysis import common

def get_output_dir(indir, downsample, suffix=''):
    outdir = common.get_output_dir('rockstar_halos', indir)
    
    if downsample != 1:
        outdir += '_downsample{}'.format(downsample)
        
    outdir += suffix
    
    return outdir


def run_rockstar(slice_dirs, ncpu=1, nnode=1, minmembers=25, downsample=1, config_template_fn='abacus.cfg.template', SO=False, suffix=''):
    if downsample < 1:
        raise ValueError(downsample)
    if ncpu < 1:
        raise ValueError(ncpu)
    if minmembers < 1:
        raise ValueError(minmembers)
    if type(config_template_fn) is not str or len(config_template_fn) < 1:
        raise ValueError(config_template_fn)
        
    
    for slice_dir in slice_dirs:
        print 'Starting Rockstar on {}'.format(slice_dir)
        
        with common.extract_slabs(slice_dir):
            slabs = sorted(glob('{}/*.dat'.format(slice_dir)))
            fn = slabs[0].split('/')[-1].replace('0000.dat','<block>.dat')
            
            # Set the output directory
            outdir = get_output_dir(slice_dir, downsample, suffix=suffix)
            
            if not os.path.exists(outdir):
                os.makedirs(outdir)
            shutil.copy(slice_dir+'/header', outdir)
            cpd = InputFile(slice_dir+'/header')['CPD']
            
            # Copy the sim-level parameter files
            if not os.path.isdir(outdir + '/../info'):
                try:
                    shutil.copytree(slice_dir+'/../info', outdir + '/../info')
                except:
                    print 'Could not copy ../info'
            
            
            # Read in the Rockstar config template and fill in the required fields
            with open(config_template_fn) as template_file:
                config = template_file.read()
                rockdir = os.getcwd()
                bgc2_snapnames = '{rockdir}/bgc2_snapnames.txt'.format(rockdir=rockdir) if SO else ''
                out_fmt = 'BINARY'
                config = config.format(slice_dir=slice_dir, fn=fn, cpd=cpd, ncpu_total=ncpu*nnode, ncpu=ncpu, outdir=outdir, minmembers=minmembers, downsample=downsample, rockdir=os.getcwd(),
                                       SO=SO, bgc2_snapnames=bgc2_snapnames, out_fmt=out_fmt)
                config = '# This file was auto-generated by rockstar.py from {}\n'.format(config_template_fn) +\
                         '# ' + str(datetime.datetime.now()) + '\n\n' +\
                         config
                with open(outdir+'/abacus-auto-server.cfg','w') as autofile:
                    autofile.write(config)
                
            # Launch Rockstar server
            retcode = subprocess32.check_call(['./rockstar', '-c', outdir+'/abacus-auto-server.cfg', '-s', '0'])
            # Now the Rockstar client is ready to be started once rockstar writes the auto-rockstar.cfg file
            
            if retcode == 0:
                # Touch rockstar_done
                with open(slice_dir + '/rockstar_done', 'a'):
                    os.utime(slice_dir + '/rockstar_done', None)

        return retcode
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run the Rockstar halo finder on Abacus outputs', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('slice_folders', help='The timeslice outputs on which to run Rockstar', nargs='+')
    parser.add_argument('--ncpu', help='Number of CPUs on this node to divide the problem over', default=1, type=int)
    parser.add_argument('--nnodes', help='Number of nodes the problem is running on', default=1, type=int)
    parser.add_argument('--downsample', help='Downsample by this factor on each dimension before finding halos.  Outputs will have "_downsampled" appended', default=1, type=int)
    parser.add_argument('--minmembers', help='Minimum halo size to search for', default=25, type=int)
    parser.add_argument('--SO', help='Produce spherical overdensity halo masses in binary catalogs', action='store_const', const=1)
    #parser.add_argument('--format', help='Format of the Abacus timeslice outputs', default='Pack14', choices=['RVdouble', 'LC', 'Pack14'])
    parser.add_argument('--suffix', help='Label the rockstar folders with "_rockstar_halosSUFFIX".', default='')
    parser.add_argument('--tar-mode', help='Compress the halo catalogs and subsamples.  ONLY_TAR will skip halo finding.  Default: None', choices=['TAR', 'ONLY_TAR'])
    parser.add_argument('--tar-remove-source-files', action='store_true', help='Remove the files that were placed the in the tar.  Must be used with --tar-mode.')
    
    args = parser.parse_args()
    
    if args.tar_remove_source_files:
        assert args.tar_mode, "--tar-remove-source-files can only be used with --tar-mode"

    retcode = 0
    if args.tar_mode != 'ONLY_TAR':
        with chdir('{abacus}/Analysis/Rockstar'.format(abacus=os.getenv('ABACUS'))):
            retcode = run_rockstar(args.slice_folders, ncpu=args.ncpu, minmembers=args.minmembers, downsample=args.downsample, SO=args.SO, suffix=args.suffix)
    
    if args.tar_mode:
        print 'Starting to make tar files of Rockstar outputs...'
        if args.tar_mode == 'ONLY_TAR':
            outdirs = args.slice_folders
        else:
            outdirs = [get_output_dir(s, args.downsample, suffix=args.suffix) for s in args.slice_folders]
        common.make_tar(outdirs, 'halo*.h5', 'halos.tar.gz', delete_source=args.tar_remove_source_files, nthreads=args.nthreads)
        common.make_tar(outdirs, 'particle*.h5', 'halo_subsamples.tar.gz', delete_source=args.tar_remove_source_files, nthreads=args.nthreads)
        print 'Finished making tar files.'
        
    exit(retcode)
