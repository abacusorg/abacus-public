#!/usr/bin/env python
import argparse
import datetime
import subprocess32
from glob import glob
import os
import contextlib
import shutil

@contextlib.contextmanager
def chdir(dirname=None):
  curdir = os.getcwd()
  try:
    if dirname is not None:
      os.chdir(dirname)
    yield
  finally:
    os.chdir(curdir)

def run_rockstar(slice_dirs, ncpu=1, minmembers=20, downsample=1, config_template_fn='abacus.cfg.template'):
    if downsample < 1:
        raise ValueError(downsample)
    if ncpu < 1:
        raise ValueError(ncpu)
    if minmembers < 1:
        raise ValueError(minmembers)
    if type(config_template_fn) is not str or len(config_template_fn) < 1:
        raise ValueError(config_template_fn)
        
    
    for slice_dir in slice_dirs:
        print 'Starting Rockstar on {}'.format(slice_dir)
        
        # Get the filenames of the slabs in this slice
        slabs = sorted(glob('{}/*.dat'.format(slice_dir)))
        #assert len(slabs) == cpd, 'Number of slabs in {} does not match the expected cpd {}'.format(slice_dir, cpd)
        cpd = len(slabs)
        assert '0000.dat' in slabs[0], 'No slab 0?'
        fn = slabs[0].split('/')[-1]  #.replace('0000.dat','<block>.dat')
        
        # Set the output directory
        split = slabs[0].split('/')[:-1]
        split[-1] = split[-1].replace('slice', 'z')
        if downsample > 1:
            split[-2] = split[-2] + '_downsampled'
        split[-2] = split[-2] + '_rockstar_halos'
        outdir = '/'.join(split)
        
        if not os.path.exists(outdir):
            os.makedirs(outdir)
        shutil.copy(slice_dir+'/header', outdir)
        
        
        # Read in the Rockstar config template and fill in the required fields
        with open(config_template_fn) as template_file:
            config = template_file.read()
            config = config.format(slice_dir=slice_dir, fn=fn, cpd=cpd, ncpu=ncpu, outdir=outdir, minmembers=minmembers, downsample=downsample)
            config = '#This file was auto-generated by rockstar.py from {}\n'.format(config_template_fn) +\
                     '#' + str(datetime.datetime.now()) + '\n\n' +\
                     config
             
            open('abacus-auto.cfg','w').write(config)
            
        # Run Rockstar
        retcode = subprocess32.check_call(['./rockstar', '-c', 'abacus-auto.cfg'])
        
        # Run host-subhalo identifier?
        #if retcode == 0:
        #    subprocess32.check_call('./util/find_parents', '<box_size> out_XYZ.list')

        return retcode
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run the Rockstar halo finder on Abacus outputs', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('slice_folders', help='The timeslice outputs on which to run Rockstar', nargs='+')
    parser.add_argument('--ncpu', help='Number of CPUs to divide the problem over', default=1, type=int)
    #parser.add_argument('--nblock', help='Number of blocks to divide the domain into (if the whole problem doesn\'t fit in memory)', default=1, type=int)
    #parser.add_argument('--eps', help='The FoF linking length, in units of the interparticle spacing (post-downsampling)', type=float, default=.2)
    parser.add_argument('--downsample', help='Downsample by this factor on each dimension before finding halos.  Outputs will have _downsampled appended', default=1, type=int)
    parser.add_argument('--minmembers', help='Minimum halo size to search for', default=20, type=int)
    #parser.add_argument('--format', help='Format of the Abacus timeslice outputs', default='Pack14', choices=['RVdouble', 'LC', 'Pack14'])
    
    args = parser.parse_args()

    with chdir('{abacus}/Analysis/Rockstar'.format(abacus=os.getenv('ABACUS'))):
        exit(run_rockstar(args.slice_folders, ncpu=args.ncpu, minmembers=args.minmembers, downsample=args.downsample))
