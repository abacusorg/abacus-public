#!/usr/bin/env python
import argparse
import datetime
import subprocess32
from glob import glob
import os
import contextlib
import shutil
import pdb
import numpy as np
from Tools import chdir
import tarfile

def get_outdir(slice_dir, downsample, suffix=''):
    split = slice_dir.split('/')
    split = [''] + [s for s in split if len(s)]
    
    split[-3] += '_products'
    split.insert(-2,split[-2] + '_products')
    split[-1] = split[-1].replace('slice', 'z')
    split[-2] += '_rockstar_halos' + suffix
    if downsample > 1:
        split[-2] += '_downsample{}'.format(downsample)
    outdir = '/'.join(split)

    return outdir

def run_rockstar(slice_dirs, ncpu=1, nnode=1, minmembers=20, downsample=1, config_template_fn='abacus.cfg.template', SO=False, suffix=''):
    if downsample < 1:
        raise ValueError(downsample)
    if ncpu < 1:
        raise ValueError(ncpu)
    if minmembers < 1:
        raise ValueError(minmembers)
    if type(config_template_fn) is not str or len(config_template_fn) < 1:
        raise ValueError(config_template_fn)
        
    
    for slice_dir in slice_dirs:
        print 'Starting Rockstar on {}'.format(slice_dir)
        
        # Get the filenames of the slabs in this slice
        slabs = sorted(glob('{}/*.dat'.format(slice_dir)))
        #assert len(slabs) == cpd, 'Number of slabs in {} does not match the expected cpd {}'.format(slice_dir, cpd)
        cpd = len(slabs)
        assert '0000.dat' in slabs[0], 'No slab 0?'
        fn = slabs[0].split('/')[-1].replace('0000.dat','<block>.dat')
        
        # Set the output directory
        outdir = get_outdir(slice_dir, downsample, suffix=suffix)
        
        if not os.path.exists(outdir):
            os.makedirs(outdir)
        shutil.copy(slice_dir+'/header', outdir)
        
        # Copy the sim-level parameter files
        if not os.path.isdir(outdir + '/../info'):
            try:
                shutil.copytree(slice_dir+'/../info', outdir + '/../info')
            except:
                print 'Could not copy ../info'
        
        
        # Read in the Rockstar config template and fill in the required fields
        with open(config_template_fn) as template_file:
            config = template_file.read()
            rockdir = os.getcwd()
            bgc2_snapnames = '{rockdir}/bgc2_snapnames.txt'.format(rockdir=rockdir) if SO else ''
            #out_fmt = 'ASCII' if SO else 'HDF5_SUBSAMPLE'  # If we are producing SO catalogs, let's use ASCII to avoid a full particle dump (or subsample)
            out_fmt = 'HDF5_SUBSAMPLE'
            magic = np.random.randint(2**31);  # A magic value to ensure that the client and server are using the same config file
            config = config.format(slice_dir=slice_dir, fn=fn, cpd=cpd, ncpu_total=ncpu*nnode, ncpu=ncpu, outdir=outdir, minmembers=minmembers, downsample=downsample, rockdir=os.getcwd(),
                                   SO=SO, bgc2_snapnames=bgc2_snapnames, out_fmt=out_fmt, magic=magic)
            config = '#This file was auto-generated by rockstar.py from {}\n'.format(config_template_fn) +\
                     '#' + str(datetime.datetime.now()) + '\n\n' +\
                     config
             
            open(outdir+'/abacus-auto-server.cfg','w').write(config)
            
        # Launch Rockstar server
        retcode = subprocess32.check_call(['./rockstar', '-c', outdir+'/abacus-auto-server.cfg', '-s', '0'])
        
        if retcode == 0:
            # Touch rockstar_done
            with open(slice_dir + '/rockstar_done', 'a'):
                os.utime(slice_dir + '/rockstar_done', None)

        return retcode
        
def make_tar(slice_folders, downsample, cleanup):
    for slice_folder in slice_folders:
        halo_slice = get_outdir(slice_folder, downsample)
        with chdir(halo_slice):
            fns = glob('halo*')
            with tarfile.open('halos.tar.gz', 'w:gz') as tar:
                for fn in fns:
                    tar.add(fn)
            if cleanup:
                for fn in fns:
                    os.remove(fn)

        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run the Rockstar halo finder on Abacus outputs', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('slice_folders', help='The timeslice outputs on which to run Rockstar', nargs='+')
    parser.add_argument('--ncpu', help='Number of CPUs on this node to divide the problem over', default=1, type=int)
    parser.add_argument('--nnodes', help='Number of nodes the problem is running on', default=1, type=int)
    #parser.add_argument('--nblock', help='Number of blocks to divide the domain into (if the whole problem doesn\'t fit in memory)', default=1, type=int)
    #parser.add_argument('--eps', help='The FoF linking length, in units of the interparticle spacing (post-downsampling)', type=float, default=.2)
    parser.add_argument('--downsample', help='Downsample by this factor on each dimension before finding halos.  Outputs will have "_downsampled" appended', default=1, type=int)
    parser.add_argument('--minmembers', help='Minimum halo size to search for', default=20, type=int)
    parser.add_argument('--SO', help='Produce spherical overdensity halo masses in binary catalogs', action='store_const', const=1)
    #parser.add_argument('--format', help='Format of the Abacus timeslice outputs', default='Pack14', choices=['RVdouble', 'LC', 'Pack14'])
    parser.add_argument('--suffix', help='Label the rockstar folders with "_rockstar_halosSUFFIX".', default='')
    parser.add_argument('--tar-mode', help='Compress the halo catalogs and subsamples.  ONLY_TAR will skip halo finding.  Default: None', choices=['TAR', 'ONLY_TAR'])
    parser.add_argument('--tar-remove-source-files', action='store_true', help='Remove the files that were placed the in the tar.  Must be used with --tar-mode.')
    
    args = parser.parse_args()
    
    if args.tar_remove_source_files:
        assert args.tar_mode, "--tar-remove-source-files can only be used with --tar-mode"

    retcode = 0
    if args.tar_mode != 'ONLY_TAR':
        with chdir('{abacus}/Analysis/Rockstar'.format(abacus=os.getenv('ABACUS'))):
            retcode = run_rockstar(args.slice_folders, ncpu=args.ncpu, minmembers=args.minmembers, downsample=args.downsample, SO=args.SO, suffix=args.suffix)
    
    if args.tar_mode:
        make_tar(args.slice_folders, args.downsample, args.tar_remove_source_files)
        
    exit(retcode)
