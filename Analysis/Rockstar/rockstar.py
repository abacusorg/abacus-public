#!/usr/bin/env python3
'''
A Python wrapper to run Rockstar on Abacus outputs.

Usage:

$ ./rockstar.py --help

'''

import argparse
import datetime
from glob import glob
import contextlib
import shutil
import subprocess
import tarfile
import re
import os
import os.path
from os.path import join as pjoin

import numpy as np

from Abacus import abacus
from Abacus.Tools import chdir, ArgParseFormatter
from Abacus.InputFile import InputFile
from Abacus.Analysis import common

def get_output_dir(indir, downsample, suffix=''):
    outdir = common.get_output_dir('rockstar_halos', indir)
    
    if downsample != 1:
        outdir += '_downsample{}'.format(downsample)
        
    outdir += suffix
    
    return outdir


def run_rockstar(slice_dirs, ncpu=1, nnode=1, minmembers=25, downsample=1, config_template_fn='abacus.cfg.template', SO=False, suffix='',
                    fileformat='PACK14', ignore_pids=False):
    if downsample < 1:
        raise ValueError(downsample)
    if ncpu < 1:
        raise ValueError(ncpu)
    if minmembers < 1:
        raise ValueError(minmembers)
    if type(config_template_fn) is not str or len(config_template_fn) < 1:
        raise ValueError(config_template_fn)

    fileformat = fileformat.upper()
    ignore_pids = int(ignore_pids)
    
    for slice_dir in slice_dirs:
        print('Starting Rockstar on {}'.format(slice_dir))
        
        with common.extract_slabs(slice_dir):
            slabs = sorted(glob(pjoin(slice_dir, '*.dat')))
            slabnum_regex = re.compile(r'slab(?P<bn>\d{4}.*).dat$')
            blocknames = []
            for fn in slabs:
                res = slabnum_regex.search(fn)
                if res and '_pids' not in res.group('bn'):
                    blocknames += [res.group('bn')]

            fn = slabnum_regex.sub('slab<block>.dat', os.path.basename(slabs[0]))
            
            # Set the output directory
            outdir = get_output_dir(slice_dir, downsample, suffix=suffix)
            
            if not os.path.exists(outdir):
                os.makedirs(outdir)
            shutil.copy(pjoin(slice_dir, 'header'), outdir)
            cpd = InputFile(pjoin(slice_dir, 'header'))['CPD']

            # two most common cases; probably missing files if not true!
            assert len(blocknames) in (cpd, 2*cpd, 4*cpd)
            
            # Copy the sim-level parameter files
            if not os.path.isdir(outdir + '/../info'):
                try:
                    shutil.copytree(slice_dir+'/../info', outdir + '/../info')
                except:
                    print('Could not copy ../info')

            # Make a file with the block names
            with open(pjoin(outdir, 'auto-block_names.txt'), 'w') as bn_file:
                bn_file.write('\n'.join(blocknames))
            
            # Read in the Rockstar config template and fill in the required fields
            with open(config_template_fn) as template_file:
                config = template_file.read()
                rockdir = os.getcwd()
                bgc2_snapnames = '{rockdir}/bgc2_snapnames.txt'.format(rockdir=rockdir) if SO else ''
                out_fmt = 'BINARY'
                config = config.format(slice_dir=slice_dir, fn=fn, nblock=len(blocknames), ncpu_total=ncpu*nnode, ncpu=ncpu, outdir=outdir, minmembers=minmembers, downsample=downsample, rockdir=os.getcwd(),
                                       SO=SO, bgc2_snapnames=bgc2_snapnames, out_fmt=out_fmt, fileformat=fileformat, ignore_pids=ignore_pids)
                config = '# This file was auto-generated by rockstar.py from {}\n'.format(config_template_fn) +\
                         '# ' + str(datetime.datetime.now()) + '\n\n' +\
                         config
                with open(outdir+'/abacus-auto-server.cfg','w') as autofile:
                    autofile.write(config)
                
            # Launch Rockstar server
            retcode = abacus.call_subprocess(['./rockstar', '-c', outdir+'/abacus-auto-server.cfg', '-s', '0'])
            # Now the Rockstar client is ready to be started once rockstar writes the auto-rockstar.cfg file

        return retcode
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__, formatter_class=ArgParseFormatter)
    parser.add_argument('slice_folders', help='The timeslice outputs on which to run Rockstar', nargs='+')
    parser.add_argument('--ncpu', help='Number of CPUs on this node to divide the problem over', default=1, type=int)
    parser.add_argument('--nnodes', help='Number of nodes the problem is running on', default=1, type=int)
    parser.add_argument('--downsample', help='Downsample by this factor on each dimension before finding halos.  Outputs will have "_downsampled" appended', default=1, type=int)
    parser.add_argument('--minmembers', help='Minimum halo size to search for', default=25, type=int)
    parser.add_argument('--SO', help='Produce spherical overdensity halo masses in binary catalogs', action='store_const', const=1)
    parser.add_argument('--format', help='Format of the Abacus timeslice outputs', default='Pack14', choices=['RVdouble', 'LC', 'Pack14', 'Pack9'])
    parser.add_argument('--suffix', help='Label the rockstar folders with "_rockstar_halosSUFFIX".', default='')
    parser.add_argument('--tar-mode', help='Compress the halo catalogs and subsamples.  ONLY_TAR will skip halo finding and assumes SLICE_DIRS are the product dirs.  ONLY_TAR_INFER will infer an existing products directory from the slice directory.  Default: None',
                            choices=['TAR', 'ONLY_TAR', 'ONLY_TAR_INFER'], default='')
    parser.add_argument('--tar-remove-source-files', action='store_true', help='Remove the files that were placed the in the tar.  Must be used with --tar-mode.')
    parser.add_argument('--ignore-pids', action='store_true', help="Ignore any PIDs (if present)")
    
    args = parser.parse_args()
    
    if args.tar_remove_source_files:
        assert args.tar_mode, "--tar-remove-source-files can only be used with --tar-mode"

    retcode = 0
    if not args.tar_mode.startswith('ONLY_TAR'):
        with chdir('{abacus}/Analysis/Rockstar'.format(abacus=os.getenv('ABACUS'))):
            retcode = run_rockstar(args.slice_folders, ncpu=args.ncpu, minmembers=args.minmembers,
                downsample=args.downsample, SO=args.SO, suffix=args.suffix, fileformat=args.format,
                ignore_pids=args.ignore_pids)
    
    if args.tar_mode:
        print('Starting to make tar files of Rockstar outputs...')
        if args.tar_mode == 'ONLY_TAR':
            outdirs = args.slice_folders
        else:
            outdirs = [get_output_dir(s, args.downsample, suffix=args.suffix) for s in args.slice_folders]
        common.make_tar(outdirs, 'halo*.h5', 'halos.tar.gz', delete_source=args.tar_remove_source_files, nthreads=args.ncpu)
        common.make_tar(outdirs, 'particle*.h5', 'halo_subsamples.tar.gz', delete_source=args.tar_remove_source_files, nthreads=args.ncpu)
        print('Finished making tar files.')
        
    exit(retcode)
