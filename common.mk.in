@WARNING@

# This file sets up compiler settings used throughout the project.
# Most Makefiles should thus include this file at the top.
# Individual Makfiles may edit some of these variables,
# but any settings that are used in more than one place should be coordinated here.

# We used to export variables so the child Makefiles could find them.
# But then the behavior was different if one invoked the child Makefile directly
# rather than from the top level.
# We'd prefer to coordinate that all from here.

CXX := @CXX@
REAL_CXX := @REAL_CXX@
CC := @CXX@ -x c
# seems to help us avoid a lot of mischief:
LDFLAGS := -Wl\,--as-needed @LDFLAGS@
CXXFLAGS := -std=c++17
ROOT_DIR ?= .
OPT := -g
# definitely not a preprocessor option, but it's the one flag we pass to gcc and g++:
CPPFLAGS := @DEFS@ -m64 -I $(ROOT_DIR)/include $(OPT) $(LDFLAGS)
#CPPFLAGS += -Wall  #TODO: clean up compiler warnings
#CPPFLAGS += -fsanitize=address,undefined

# We use bash syntax in some Makefiles
SHELL := /bin/bash

CUDA_ENABLED = @CUDA_ENABLED@
ifeq (@CUDA_ENABLED@,CUDA_ENABLED)
    NVCC_FLAGS := @CUDA_CFLAGS@ @DEFS@ $(OPT) -I $(ROOT_DIR)/include $(CXXFLAGS) -ccbin @CXX@
    NVCC_XCOMPILERFLAGS := 
    CUDA_LIBS := @CUDA_LDFLAGS@ -lcuda -lcudart
    NVCC := @NVCC@
    CUDA_ARCH := @CUDA_ARCH@
endif

# git version, like "v2.2.3-27-gc08fe8b1-dirty"
GITVERSION := $(shell git describe --tags --dirty --always)
CPPFLAGS += -DGITVERSION=\"$(GITVERSION)\"

# It's not okay to link everything against tcmalloc.
# With dynamically loaded Python extensions, that will switch the malloc implementation midstream and cause errors.
# We should endeavor to keep CPPFLAGS globally useable/useful even if SINGLESTEP_LIBS is not.
# Most libraries are mandatory anyway, so we can specify the -l flags manually in the Makefiles instead of propagating them from configure
#CPPFLAGS += $(TCMALLOC_CPPFLAGS)

MULTIPOLES_OBJ :=
# These are the optimized multipole/taylor object files that
# singlestep/Multipoles/Makefile will generate and singlestep/Makefile will link against
ifeq (@MULTIPOLES_SIMD@,MULTIPOLES_SIMD_AVX512)
    MULTIPOLES_OBJ += CMAVX512.o ETAVX512.o
else ifeq (@MULTIPOLES_SIMD@,MULTIPOLES_SIMD_AVX)
    MULTIPOLES_OBJ += ETAVX.o CMAVX.o
else ifeq (@MULTIPOLES_SIMD@,MULTIPOLES_SIMD_VSX)
    MULTIPOLES_OBJ += CM_VSX.o ET_VSX.o
else ifeq (@MULTIPOLES_SIMD@,MULTIPOLES_SIMD_UNROLLED)
    MULTIPOLES_OBJ += CM_unrolled.o ET_unrolled.o
endif

MAXORDER := @MAXORDER@

# Really only singlestep and friends should use the following libs. It's not safe to link everything against all the libs here (e.g. tcmalloc)
SINGLESTEP_LIBS := @LIBS@

# Some of this setup could surely be done inside configure
# I think that mostly makes sense for external dependencies,
# or bundled dependencies that we functionally treat as external
# (i.e. compile once and never touch again) like tcmalloc
PARSEHEADER_LIBS := -L $(ROOT_DIR)/ParseHeader -lparseheader
PARSEHEADER_CPPFLAGS := -I $(ROOT_DIR)/ParseHeader

# pthread and openmp are of course separate, but in practice we often use them together
THREAD_LIBS := -pthread
THREAD_CPPFLAGS := -fopenmp

GPU_CONVOLUTION_ENABLED = @GPU_CONVOLUTION_ENABLED@
ifeq ($(GPU_CONVOLUTION_ENABLED),GPU_CONVOLUTION_ENABLED)
	CUDA_LIBS += -lcufft
endif

READABACUS_CPPFLAGS := -I $(ROOT_DIR)/clibs
READABACUS_LIBS := -L $(ROOT_DIR)/clibs

PYTHON_CC := @PYTHON_CC@
PYTHON_CXX := @PYTHON_CXX@
PYTHON_LDFLAGS := @PYTHON_LDFLAGS@
# before we do icc customizations (in theory we could detect which compiler PYTHON_CC is):
PYTHON_CPPFLAGS := $(CPPFLAGS) @PYTHON_CPPFLAGS@

GSL_CPPFLAGS :=
GSL_LIBS := -lgsl -lgslcblas

FFTW_LIBS := -lfftw3 -lfftw3f
FFTW_OMP_LIBS := -lfftw3_omp -lfftw3f_omp

# Define GNU/Intel specific compiler options
# We do this towards the bottom of the Makefile so we can modify options set above
# In theory this is all fairly "static" and could be done in configure.ac if performance were a concern
# (since common.mk is reloaded for every Makefile)
# But it might be easier to leave compiler customizations here for people to edit
ifeq (@REAL_CXX@,g++)
    CXX_MAJOR_VER := $(shell $(CXX) -dumpversion | cut -f1 -d.)
    CPPFLAGS += -O3
    #CPPFLAGS += -fsanitize=address,undefined

    ifeq (@ARCH@,powerpc)
        # powerpc does not accept -march=native
        CPPFLAGS += -mcpu=native -mtune=native
    else
        CPPFLAGS += -march=native
    endif

    # offloading sends openmp to the GPU
    GNUC_GE_7 := $(shell [ $(CXX_MAJOR_VER) -ge 7 ] && echo true)
    ifeq ($(GNUC_GE_7),true)
        THREAD_CPPFLAGS += -foffload=disable
    endif
else ifeq (@REAL_CXX@,icc)
    CPPFLAGS += -O3 -xHost -fp-model precise -fbuiltin -ip -qmkl -qtbb #-ipo #-prof-use=weighted
    NVCC_XCOMPILERFLAGS += -fp-model precise -ip -qmkl -qtbb

    FFTW_LIBS := -qmkl
    FFTW_OMP_LIBS := -qmkl

else ifeq (@REAL_CXX@,xlc++)
    CPPFLAGS += -O5
    CPPFLAGS += -qarch -qtune -qcache

else ifeq (@REAL_CXX@,clang++)
    # for debugging clang under gdb
    # clang refuses to catch exceptions. something to do with rtti?
    CPPFLAGS += -O3 -D_GLIBCXX_DEBUG -frtti -fexceptions -fcxx-exceptions
endif

TCMALLOC_CPPFLAGS :=
ifeq (@TCMALLOC@,TCMALLOC_ENABLED)
    TCMALLOC_CPPFLAGS += -I $(ROOT_DIR)/gperftools/include
    TCMALLOC_CPPFLAGS += -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free
    TCMALLOC_LIBS += -ltcmalloc_minimal
    # -ltcmalloc automatically goes into LIBS if it's available, but maybe executables other than singlestep want it
endif

# If either PYTHON_CC or PYTHON_CXX is undefined
#PythonCompilerWarning:
#	$(warning "[Warning] Anaconda Python detected, but no Anaconda compilers were found.\
#	Some Python extensions may not work.  Download the Anaconda gcc and gxx *_impl packages\
#	for your platform (only download the *_impl packages: the primary gcc/gxx packages will\
#	probably override the system compilers).")

ParseHeader: $(ROOT_DIR)/ParseHeader/libparseheader.a
$(ROOT_DIR)/ParseHeader/libparseheader.a:
	$(MAKE) -C $(ROOT_DIR)/ParseHeader libparseheader.a

.PHONY: ParseHeader

# We provided the ParseHeader definition in this file which may be
# included at the top of other Makefiles.  Don't let it be the default target!
.DEFAULT_GOAL :=

HAVE_COMMON_MK := True
